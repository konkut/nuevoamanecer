 onclick="event.stopPropagation(); toggleStatus()">

El problema con array_merge($a_c_s_2, $a_c_i_2) es que cuando los arrays tienen claves de texto idénticas, como "CAJA 4", el segundo array sobrescribe al primero en la fusión.

Por eso, el resultado solo conserva el valor de "CAJA 4" con total => 23.0 (del segundo array), descartando total => 46.0 del primero.

$sales = Sale::whereBetween('created_at', [$start_date, $end_date])
            ->with(['denomination.cashregister', 'transaction.bankregister', 'user'])->get();
$platforms = $income->platforms()->wherePivot('type', "2")->pluck('name');

$incomes = Income::with(['denomination.cashregister', 'transaction.bankregister', 'user'])
            ->orderBy('created_at', 'desc')->paginate($perPage);


 $bankregisters = Cashshift::join('transactions', 'transactions.cashshift_uuid', '=', 'cashshifts.cashshift_uuid')
            ->join('bankregisters', 'bankregisters.bankregister_uuid', '=', 'transactions.bankregister_uuid')
            ->where('transactions.type', 2)
            ->where('cashshifts.user_id', $income->user_id)
            ->pluck('bankregisters.name', 'bankregisters.bankregister_uuid')
            ->map(function ($value, $key) {
                return (object)[
                    'bankregister_uuid' => $key,
                    'name' => $value,
                ];
            })->toArray();


No colocar 'user_id' => Auth::id(), en el update ya que se perdera quiern realizo el registro

buscar la sesion por registro no por authenticado


$cashshifts = Cashshift::where('status', 1)->whereNull('end_time')->whereDate('start_time', '<', $today)->get();

$item->bank_name = $transaction->pluck('bankregister.name')->toArray();

$array_banks_request_aux = array_filter($array_banks_request, function ($item) {
                    return $item !== null;
                });

catch (\Illuminate\Database\Eloquent\ModelNotFoundException $e) {

        }


TAILWIND
A veces es necesario aplicar estilo a un elemento bajo una combinación de condiciones, por ejemplo, en modo oscuro, en un punto de interrupción específico, cuando se pasa el mouse sobre él y cuando el elemento tiene un atributo de datos específico.
<button class="dark:lg:data-current:hover:bg-indigo-600 ...">

Tailwind también admite cosas como group-hover, que te permiten darle estilo a un elemento cuando se pasa el cursor sobre un elemento padre específico:
<a href="#" class="group rounded-lg p-8">
  <span class="group-hover:underline">Read more…</span>
</a>
Esta group-*sintaxis también funciona con otras variantes, como group-focus, group-active, y muchas más .

<div class="mt-3 flex -space-x-2 overflow-hidden">
<img class="inline-block h-12 w-12 rounded-full ring-2 ring-white" src="https://images.unsplash.com/photo-1550525811-e5869dd03032?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80" alt="" />
<img class="inline-block h-12 w-12 rounded-full ring-2 ring-white" src="https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.25&w=256&h=256&q=80" alt="" />
</div>

Cuando se agregan dos clases que tienen como objetivo la misma propiedad CSS, la clase que aparece más adelante en la hoja de estilos gana. Por lo tanto, en este ejemplo, el elemento recibirá el valor display: gridaunque flexaparezca último en el classatributo real:
<div class="grid flex">

Cuando realmente necesitas forzar que una clase de utilidad específica tenga efecto y no tienes otros medios para administrar la especificidad, puedes agregar !al final del nombre de la clase para hacer todas las declaraciones !important:
<div class="bg-teal-500 bg-red-500!">

Si está agregando Tailwind a un proyecto que tiene CSS complejo existente con reglas de alta especificidad, puede usar la importantbandera al importar Tailwind para marcar todas las utilidades como !important:
@import "tailwindcss" important;

<li class="flex py-4 first:pt-0 last:pb-0">
  <img class="h-10 w-10 rounded-full" src={person.imageUrl} alt="" />
  <div class="ml-3 overflow-hidden">
    <p class="text-sm font-medium text-gray-900 dark:text-white">{person.name}</p>
    <p class="truncate text-sm text-gray-500 dark:text-gray-400">{person.email}</p>
  </div>
</li>

<label class="has-checked:bg-indigo-50 has-checked:text-indigo-900 has-checked:ring-indigo-200 dark:has-checked:bg-indigo-950 dark:has-checked:text-indigo-200 dark:has-checked:ring-indigo-900 ...">
  <svg fill="currentColor">
  </svg>
  Google Pay
  <input type="radio" class="checked:border-indigo-500 ..." />
</label>
Puedes usar has-*una pseudoclase, como has-[:focus], para darle estilo a un elemento en función del estado de sus descendientes. También puedes usar selectores de elementos, como has-[img]o has-[a], para darle estilo a un elemento en función del contenido de sus descendientes.

Estilo basado en los descendientes de un par
Si necesita diseñar un elemento en función de los descendientes de un elemento hermano, puede marcar el hermano con la peerclase y usar la peer-has-*variante para diseñar el elemento de destino:
<div>
  <label class="peer ...">
    <input type="checkbox" name="todo[1]" checked />
    Create a to do list
  </label>
  <svg class="peer-has-checked:hidden ..."><!-- ... --></svg>
</div>

Para diseñar un elemento según el ancho de un elemento principal en lugar de la ventana gráfica, use variantes como @mdy @lg:
<div class="@container">
  <div class="flex flex-col @md:flex-row">
    <!-- ... -->
  </div>
</div>

orientación
Utilice las variantes portraity landscapepara agregar estilos condicionalmente cuando la ventana gráfica esté en una orientación específica:
<div>
  <div class="portrait:hidden">
    <!-- ... -->
  </div>
  <div class="landscape:hidden">
    <p>This experience is designed to be viewed in landscape. Please rotate your device to view the site.</p>
  </div>
</div>

imprimir
Utilice la printvariante para agregar estilos condicionalmente que solo se apliquen cuando se imprime el documento:
<div>
  <article class="print:hidden">
    <h1>My Secret Pizza Recipe</h1>
    <p>This recipe is a secret, and must not be shared with anyone</p>
    <!-- ... -->
  </article>
  <div class="hidden print:block">Are you seriously trying to print this? It's secret!</div>
</div>

<div class="flex hover:bg-[#d1d5db44] transition duration-200">

try {
            return response()->json([
                'type' => 'success',
                'title' => __('word.general.success'),
                'denomination' => $denomination,
            ], 200);
        } catch (\Illuminate\Database\Eloquent\ModelNotFoundException $e) {
            return response()->json([
                'type' => 'error',
                'title' => __('word.general.error'),
                'msg' => __('word.general.not_found'),
            ], 404);
        } catch (\Exception $e) {
            return response()->json([
                'type' => 'error',
                'title' => __('word.general.error'),
                'msg' => __('word.general.bad_request'),
            ], 500);
        }

$array_bankregister = [];
            foreach ($bankregister_uuids as $bankregister_uuid) {
                $bankregister = Bankregister::where('bankregister_uuid', $bankregister_uuid)->toArray();
                if ($bankregister->name){
                    $array_bankregister[] = $bankregister->name;
                }
            }


 {{ $last_record->cash_income_uuid === $item->income_uuid && $last_record->cash_income_uuid ||
                                        $last_record->cash_expense_uuid === $item->expense_uuid && $last_record->cash_expense_uuid ||
                                        $last_record->cash_sale_uuid === $item->sale_uuid && $last_record->cash_sale_uuid ? 'bg-yellow-200' : '' }}"

{{ $last_record->bank_income_uuid === $item->income_uuid && $last_record->bank_income_uuid ||
                                        $last_record->bank_expense_uuid === $item->expense_uuid && $last_record->bank_expense_uuid ||
                                        $last_record->bank_sale_uuid === $item->sale_uuid && $last_record->bank_sale_uuid ? 'bg-yellow-200' : '' }}
protected function passwordRules(): array
protected: Este método solo puede ser accedido desde la clase donde se define o sus subclases.
passwordRules(): Es el nombre del método, generalmente usado para centralizar las reglas de validación de contraseñas.
: array: Indica que el método devolverá un array.
ASI LO USAMOS
'password' => $this->passwordRules(),


$user->forceFill([...]): Asigna valores al modelo User sin pasar por los métodos de protección contra asignación masiva (fillable).


esto <a href="javascript:void(0)" en lugar de <a href="#" evitara que al hacer clic la pantalla suba al inicio


__('word.two_factor',['app_name' => config('doris.app_name')])

Log::info("data_initial_session", ['date' => $this->date]);

msgs: JSON.stringify(['mensaje #1', 'mensaje #2', 'mensaje #3']
messages = JSON.parse(data.msgs);
(3) ['mensaje #1', 'mensaje #2', 'mensaje #3']



El problema ocurre porque ambas tablas tienen una columna user_id, y al incluir 'cashregisters.*', se sobrescribe el valor de cashshifts.user_id con el de cashregisters.user_id. Para evitarlo:

Usa alias (as) para diferenciar las columnas.
Selecciona explícitamente las columnas necesarias.

en lugar de la consulta esperada con JOIN es porque Eloquent, al trabajar con soft deletes, automáticamente aplica una cláusula WHERE deleted_at IS NULL en las tablas involucradas.

data-price="{{$products->firstWhere('product_uuid', $product_uuid)->price}}"


  php artisan config:clear
  php artisan view:clear
  php artisan route:clear
  php artisan cache:clear
  php artisan optimize


  $collection = collect([1, 2, 2, 3, 4, 4, 5]);
  $unique = $collection->unique();
  dd($unique);
  Resultado:
  php
  Copiar código
  Illuminate\Support\Collection {#items: [1, 2, 3, 4, 5]}


  $transactions = Transaction::pluck('name', 'total')->map(function ($value, $key) {
      return [
          'name' => $key,
          'total' => $value,
      ];
  })->toArray();



  $transactions = Transaction::all()->map(function ($transaction) {
      return [
          'name' => $transaction->name,
          'total' => $transaction->total,
          'description' => $transaction->description,
      ];
  });


  ->whereNotNull('cashregister_id')

   public function index(Request $request)
      {
          $perPage = $request->input('perPage', 10);
          $bankregisters_query = Bankregister::orderBy('created_at', 'desc');
          $bankregisters_query->where('name', '!=', 'EFECTIVO');
          $bankregisters = $bankregisters_query->paginate($perPage);
          foreach ($bankregisters as $item) {
              $item->total = Transaction::where('reference_uuid', $item->bankregister_uuid)->value('total');
          }
          return view("bankregister.index", compact('bankregisters', 'perPage'));
      }



   echo '<pre>';
    print_r($old_quantities);
    print_r($old_servicewithprice_uuids);
    print_r($old_bankregister_uuids_alls);
    print_r($old_bankregister_uuids_session);
    echo '</pre>';


@php
    $validation = \App\Models\Cashshift::where('cashshift_uuid', $item->cashshift_uuid)->where('status', '1')->exists();
@endphp


Se aplico enmascaramiento en los 4 primeros letras de cuenta de banco




// $amounts = array_map(fn($amount) => number_format((float) $amount, 2, '.', ''), $request->amounts ?? []);
       // $commissions = array_map(fn($commission) => number_format((float) $commission, 2, '.', ''), $request->commissions ?? []);


 El problema probablemente se debe a que estás seleccionando solo el campo stock en tu consulta con ->select('stock'). Esto significa que el objeto $product devuelto es un modelo parcial, y Laravel no puede realizar una operación de actualización con un modelo incompleto, ya que no tiene el campo id o la clave primaria necesaria para identificar el registro a actualizar.

 NO SOBREESCRIBIR LA VARIABLE $cashshift TAMPOCO $cashshifts
 $cashshift = Cashshift::where('user_id', Auth::id())->where('status', '1')->with('cashregister')->first();

array_merge($servicewithpriceCount, $servicewithoutpriceCount);

$service = Servicewithprice::where('servicewithprice_uuid', $serviceUuid)->first();
                if ($service) {
                    if (isset($servicewithpriceCount[$service->name])) {
                        $servicewithpriceCount[$service->name]['cantidad']++;
                        $servicewithpriceCount[$service->name]['monto'] += $service->amount;
                        $servicewithpriceCount[$service->name]['commission'] += $service->commission;
                    } else {
                        $servicewithpriceCount[$service->name] = ['cantidad' => 1, 'servicio' => $service->name, 'monto' => $service->amount, 'commission' => $service->commission];
                    }
                }

$cashshift = Cashshift::where('start_time', now()->toDateString())->first();
$paymentwithoutprices = Paymentwithoutprice::whereDate('created_at', now())->get();

objeto eloquent ($opening->bill_200 ?? 0)

$closing = (object) [

{#1786 ▼ // app/Http/Controllers/DashboardController.php:82
  +"bill_200": 6
  +"bill_100": -1
  +"bill_50": 0
  +"bill_20": 1
  +"bill_10": 1
  +"coin_5": 0
  +"coin_2": 0
  +"coin_1": 0
  +"coin_0_5": 1
  +"coin_0_2": 0
  +"coin_0_1": 0
  +"physical_cash": "1130.50"
  +"digital_cash": "1.00"
  +"total": "1131.50"
}



array $difference['bill_200'] ?? 0,
array:14 [▼ // app/Http/Controllers/DashboardController.php:82
  "bill_200" => 6
  "bill_100" => -1
  "bill_50" => 0
  "bill_20" => 1
  "bill_10" => 1
  "coin_5" => 0
  "coin_2" => 0
  "coin_1" => 0
  "coin_0_5" => 1
  "coin_0_2" => 0
  "coin_0_1" => 0
  "physical_cash" => "1130.50"
  "digital_cash" => "1.00"
  "total" => "1131.50"
]


si me equivoco de enlace que te avise una ventana que ese url no existe https://www.bcb.gob.bo/webdocs/nfb/billetes/nfb/moneda5.html



¿Qué cambia si no tienes $casts?
Sin $casts:

Los valores se manejarán como cadenas (strings) cuando los recuperes desde la base de datos, incluso si el contenido es JSON.
Tendrás que manejar la conversión manualmente con funciones como json_decode al recuperar los valores y json_encode al almacenarlos.
Ejemplo sin $casts:

php
Copiar código
$quantities = json_decode($model->quantities, true); // Decodificación manual
$model->quantities = json_encode($array); // Codificación manual
Con $casts:

Laravel hace automáticamente la conversión al tipo especificado. No necesitas preocuparte por convertir manualmente los valores.
Ejemplo con $casts:
php
Copiar código
$quantities = $model->quantities; // Ya es un array
$model->quantities = $array; // Laravel lo convierte automáticamente a JSON al guar




$table->enum('type', ['opening', 'income', 'expense', 'closing','cashcount','total_opening','total_closing','total_incomes','total_expenses'])->default('income');

$cashshifts = Cashshift::whereBetween('start_time', [now()->startOfDay(), now()->endOfDay()])->with('denominations_opening')->get();

 $value = is_numeric($value) ? $value : 0;
  if (!isset($totals[$key])) {

  now()->toDateString()

********* REVISAR APUNTES

PASOS PARA SUBIR AL HOST TERMINAL
CAMBIAR EL ARCHIVO .ENV
chmod -R 775 nuevoamanecer
php artisan livewire:publish --assets
php artisan route:clear
php artisan config:clear
php artisan cache:clear
php artisan migrate:fresh --seed

use Illuminate\Support\Facades\Log;
gettype(json_encode($services)));
LARAVEL EXCEL
composer require maatwebsite/excel --with-all-dependencies
php artisan make:export PaymentwithoutpriceExport --model=Paymentwithoutprice

\Log::info('Eliminando denominaciones del modelo: '.$model->cashcount_uuid);

solo a un array {{ implode(', ', $item->amounts) }}
suma de array array_sum($amounts);
lo convierte a array <p>{{ implode(', ', json_decode($item->amounts, true)) }}</p>

$number = 12345.6789;
echo number_format($number, 2); // "12,345.68"


$names = json_decode($item->names, true);
$amounts = json_decode($item->amounts, true);
$commissions = json_decode($item->commissions, true);
if (!is_array($names) || !is_array($amounts) || !is_array($commissions)) {
    // Manejo de error: verifica que los datos decodificados sean válidos
    throw new Exception('Los datos JSON no son válidos.');
}


@php artisan vendor:publish --tag=laravel-assets --ansi --force
composer self-update
composer --version

php artisan make:livewire users
php artisan make:view users-pdf
     /*
        $paymentwithoutprice = Paymentwithoutprice::where('paymentwithoutprice_uuid', $paymentwithoutprice_uuid)->firstOrFail();
        $denominationables = Denominationables::where('denominationable_uuid', $paymentwithoutprice->paymentwithoutprice_uuid)->firstOrFail();
        $denomination = Denomination::where('denomination_uuid', $denominationables->denomination_uuid)->firstOrFail();
        $transactionmethods = Transactionmethod::all();
        $servicewithprices = Servicewithprice::all();
        return view("paymentwithoutprice.edit", compact('paymentwithoutprice', 'denomination', 'transactionmethods', 'servicewithprices'));
        */
        /*$paymentwithoutprice_aux = Paymentwithoutprice::where('paymentwithoutprice_uuid', $paymentwithoutprice_uuid)->firstOrFail();
        $denominationables_aux = Denominationables::where('denominationable_uuid', $paymentwithoutprice_aux->paymentwithoutprice_uuid)->firstOrFail();
        $denomination = Denomination::where('denomination_uuid', $denominationables_aux->denomination_uuid)->firstOrFail();
        $denominationables = Denominationables::where('denomination_uuid', $denomination->denomination_uuid)->get();
        $paymentwithoutpriceUUIDs = $denominationables->pluck('denominationable_uuid')->toArray();
        $servicewithpriceNames = [];
        $transactionmethodNames = [];

        foreach ($paymentwithoutpriceUUIDs as $uuid) {
            $paymentwithoutprice = Paymentwithoutprice::where('paymentwithoutprice_uuid', $uuid)->firstOrFail();
            $servicewithprice = Servicewithprice::where('servicewithprice_uuid', $paymentwithoutprice->servicewithprice_uuid)->firstOrFail();
            $transactionmethod = Transactionmethod::where('transactionmethod_uuid', $paymentwithoutprice->transactionmethod_uuid)->firstOrFail();
            $servicewithpriceNames[] = $servicewithprice->name;
            $transactionmethodNames[] = $transactionmethod->name;
        }
        $servicewithprices = Servicewithprice::all();
        $transactionmethods = Transactionmethod::all();

        return view('paymentwithoutprice.edit', compact('servicewithprices', 'transactionmethods', 'denomination', 'servicewithpriceNames', 'transactionmethodNames'));
    */



    //Validation income from transfer
    $rules = [
      /*'date' => [
        'required',              // El campo es obligatorio
        'date',                 // Validar que sea una fecha válida
        'after_or_equal:today', // La fecha debe ser hoy o una fecha futura (opcional)
      ],*/
      'opening' => [
        'required',
        'numeric',
        'regex:/^\d{1,20}(\.\d{1,2})?$/',
      ],
      /*'closing' => [
        'nullable',
        'numeric',
        'regex:/^\d{1,20}(\.\d{1,2})?$/',
      ],*/
      /*'opening_denomination_uuid' => [
        'required',
        'string',
        'max:36',
      ],
      'closing_denomination_uuid' => [
        'required',
        'string',
        'max:36',
      ]*/
    ];


CTRL + D DUPLICAR CODIGO
CTRL + SHIFT + DIRECCIONALES MOVER CODIGO
CTRL + N BUSCAR
SHIFT + SHIFT BUSCAR


THEME COLORES PROYECTO
FFDAB9
FFA07A
F75C5C


SOLUCION DEL ERROR
sudo chmod -R 775 nuevoamanecer
php artisan livewire:publish --assets
php artisan route:clear
php artisan config:clear
php artisan cache:clear


120bs renovacion dominio hostinger

NAME SERVER hostinger
ns1.dns-parking.com
ns2.dns-parking.com

NAME SERVER DE HOSTGATOR
ns26.hostgator.mx
ns27.hostgator.mx

SEEDER
php artisan make:seeder RoleSeeder
php artisan db:seed --class=RoleSeeder

ACTUALIZAR
php artisan config:clear
php artisan view:clear
php artisan route:clear
php artisan cache:clear
php artisan optimize

composer update

Recompila los assets
npm install
npm run dev

Publica los assets de Livewire
php artisan livewire:publish

Verificar en el navegador
http://127.0.0.1:8000/livewire/livewire.js

eliminar del archivo .gitignore la linea
/public/build

ssh -p 65002 u201205301@217.196.55.84
Nuevoamanecer7.



TABLA VACIA
@if($categories->count())
TABLA
@else
NO HAY REGISTROS
@endif


 {{
          <!--
            <x-nav-link href="{{ route('income.index') }}" :active="request()->routeIs('incomes.index')">
              {{ __('word.income.list') }}
            </x-nav-link>
            <x-nav-link href="{{ route('income.create') }}" :active="request()->routeIs('incomes.create')">
              {{ __('word.income.new') }}
            </x-nav-link>
          -->
          }}


  <form method="POST" id="form_service_create" action="javascript:void(0);">


